{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Panel","props","state","articles","axios","get","then","res","console","log","setState","data","className","this","map","article","key","id","React","Component","NewsCell","href","content","title","authors","date","preview","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,2B,wKCerCC,E,kDAEF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,SAAU,CAAC,CAAC,QAAU,gBACV,QAAU,eACV,KAAO,oBACP,QAAU,+BACV,MAAQ,sDACR,GAAM,MARP,E,gEAoCE,IAAD,OAChBC,IAAMC,IAAI,iBACTC,MAAK,SAAAC,GACFC,QAAQC,IAAIF,GACR,EAAKG,SAAS,CACVP,SAAUI,EAAII,KAAKR,gB,+BAO/B,OACI,yBAAKS,UAAU,SACVC,KAAKX,MAAMC,SAASW,KAAI,SAACC,GAAD,OAAa,kBAAC,EAAD,CAAUA,QAASA,EAASC,IAAKD,EAAQE,a,GApD3EC,IAAMC,WA2DpBC,E,uKAEE,OACI,yBAAKR,UAAU,QACX,yBAAKA,UAAU,SAAQ,uBAAGS,KAAMR,KAAKZ,MAAMc,QAAQO,SAAUT,KAAKZ,MAAMc,QAAQQ,QAChF,yBAAKX,UAAU,UAAUC,KAAKZ,MAAMc,QAAQS,SAC5C,yBAAKZ,UAAU,QAAQC,KAAKZ,MAAMc,QAAQU,MAC1C,yBAAKb,UAAU,WAAWC,KAAKZ,MAAMc,QAAQW,c,GAPtCR,IAAMC,WAcdQ,EAnFf,WACK,OACG,6BAEI,kBAAC,EAAD,QCGQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"js/main.54faf0ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\n\nfunction App() {\n     return (\n        <div>\n            {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\n            <Panel/>\n        </div>\n    );\n}\n\n\nclass Panel extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            articles: [{\"authors\":\"Will McCallum\",\n                        \"content\":\"//google.com\",\n                        \"date\":\"21 September 2020\",\n                        \"preview\":\"Today, scientists sounded...\",\n                        \"title\":\"The ice is disappearing, BUT a movement is emerging\",\n                        \"id\": 13},]\n        }\n        //\n        // fetch(\"/news/api/get\")\n        // .then(res => {\n        //     if (res.ok) {\n        //         console.log(\"ok block \", res)\n        //         return res.json();\n        //     } else {\n        //         throw new Error(\"request error occurred\");\n        //     }\n        // })\n        //\n        // .then(\n        //     (res) => {\n        //         console.log(\"then block\")\n        //         this.state = {\n        //             articles: res.articles,\n        //         }\n        //         console.log(this.state)\n        //     }\n        // )\n        // .catch((error) => {\n        //     console.log(\"error\");\n        // })\n        // console.log(this.state)\n    }\n\n    componentDidMount() {\n        axios.get(\"/news/api/get\")//\"http://0.0.0.0:81/news/api/get\"\n        .then(res => {\n            console.log(res);\n                this.setState({\n                    articles: res.data.articles,\n                })\n            }\n        )\n    }\n\n    render() {\n        return(\n            <div className=\"panel\">\n                {this.state.articles.map((article) => <NewsCell article={article} key={article.id}/>)}\n            </div>\n        )\n    }\n}\n\n\nclass NewsCell extends React.Component{\n    render(){\n        return(\n            <div className=\"Cell\">\n                <div className=\"title\"><a href={this.props.article.content}>{this.props.article.title}</a></div>\n                <div className=\"author\">{this.props.article.authors}</div>\n                <div className=\"date\">{this.props.article.date}</div>\n                <div className=\"preview\">{this.props.article.preview}</div>\n            </div>\n        )\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}